{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tEKS \u00b6 tEKS is a set of Terraform / Terragrunt modules designed to get you everything you need to run a production EKS cluster on AWS. It ships with sensible defaults, and add a lot of common addons with their configurations that work out of the box. the v5 and further version of this project have been completely revamp and now offer a skeleton to use as a base for your infrastructure projects around EKS. All the modules have been moved outside this repository and get their own versioning. The old README is accessible here Main purposes \u00b6 The main goal of this project is to glue together commonly used tooling with Kubernetes/EKS and to get from an AWS Account to a production cluster with everything you need without any manual configuration. What you get \u00b6 A production cluster all defined in IaaC with Terraform/Terragrunt: AWS VPC if needed based on terraform-aws-vpc EKS cluster base on terraform-aws-eks Kubernetes addons based on terraform-kubernetes-addons : provides various addons that are often used on Kubernetes and specifically on EKS. Kubernetes namespaces quota management based on terraform-kubernetes-namespaces : allows administrator to manage namespaces and quotas from a centralized configuration with Terraform. AWS ECR registries management based on terraform-aws-ecr Everything is tied together with Terragrunt and allows you to deploy a multi cluster architecture in a matter of minutes (ok maybe an hour) and different AWS accounts for different environments. Curated Features \u00b6 The main additionals features are the curated addons list, see here and in the customization of the cluster policy Enforced security \u00b6 Default PSP is removed and sensible defaults are enforced All addons have specific PSP enabled No IAM credentials on instances, everything is enforced with IRSA or KIAM Each addons is deployed in it's own namespace with sensible default network policies Out of the box monitoring \u00b6 Prometheus Operator with defaults dashboards Addons that support metrics are enable along with their serviceMonitor Custom grafana dashboard are available by default. Helm v3 provider \u00b6 All addons support Helm v3 configuration All charts are easily customizable Other and not limited to \u00b6 priorityClasses for addons use of [ kubectl-provider ], no more local exec and custom manifest are properly handled lot of manual stuff have been automated under the hood Requirements \u00b6 Terragrunt is not a hard requirement but all the modules are tested with Terragrunt. Terraform Terragrunt kubectl helm aws-iam-authenticator Examples \u00b6 terraform/live folder provides an opinionated directory structure for a production environment with an example using Additional infrastructure blocks \u00b6 If you wish to extend your infrastructure you can pick up additional modules on the clusterfrak-dynamics github page Branches \u00b6 master : Backward incompatible with v1.X but compatible with v2.X, releases bumped to v3.X because a lot has changed. release-1.X : Compatible with Terraform < 0.12 and Terragrunt < 0.19. Be sure to target the same modules version. release-2.X : Compatible with Terraform >= 0.12 and Terragrunt >= 0.19. Be sure to target the same modules version. License \u00b6","title":"Overview"},{"location":"#teks","text":"tEKS is a set of Terraform / Terragrunt modules designed to get you everything you need to run a production EKS cluster on AWS. It ships with sensible defaults, and add a lot of common addons with their configurations that work out of the box. the v5 and further version of this project have been completely revamp and now offer a skeleton to use as a base for your infrastructure projects around EKS. All the modules have been moved outside this repository and get their own versioning. The old README is accessible here","title":"tEKS"},{"location":"#main-purposes","text":"The main goal of this project is to glue together commonly used tooling with Kubernetes/EKS and to get from an AWS Account to a production cluster with everything you need without any manual configuration.","title":"Main purposes"},{"location":"#what-you-get","text":"A production cluster all defined in IaaC with Terraform/Terragrunt: AWS VPC if needed based on terraform-aws-vpc EKS cluster base on terraform-aws-eks Kubernetes addons based on terraform-kubernetes-addons : provides various addons that are often used on Kubernetes and specifically on EKS. Kubernetes namespaces quota management based on terraform-kubernetes-namespaces : allows administrator to manage namespaces and quotas from a centralized configuration with Terraform. AWS ECR registries management based on terraform-aws-ecr Everything is tied together with Terragrunt and allows you to deploy a multi cluster architecture in a matter of minutes (ok maybe an hour) and different AWS accounts for different environments.","title":"What you get"},{"location":"#curated-features","text":"The main additionals features are the curated addons list, see here and in the customization of the cluster policy","title":"Curated Features"},{"location":"#enforced-security","text":"Default PSP is removed and sensible defaults are enforced All addons have specific PSP enabled No IAM credentials on instances, everything is enforced with IRSA or KIAM Each addons is deployed in it's own namespace with sensible default network policies","title":"Enforced security"},{"location":"#out-of-the-box-monitoring","text":"Prometheus Operator with defaults dashboards Addons that support metrics are enable along with their serviceMonitor Custom grafana dashboard are available by default.","title":"Out of the box monitoring"},{"location":"#helm-v3-provider","text":"All addons support Helm v3 configuration All charts are easily customizable","title":"Helm v3 provider"},{"location":"#other-and-not-limited-to","text":"priorityClasses for addons use of [ kubectl-provider ], no more local exec and custom manifest are properly handled lot of manual stuff have been automated under the hood","title":"Other and not limited to"},{"location":"#requirements","text":"Terragrunt is not a hard requirement but all the modules are tested with Terragrunt. Terraform Terragrunt kubectl helm aws-iam-authenticator","title":"Requirements"},{"location":"#examples","text":"terraform/live folder provides an opinionated directory structure for a production environment with an example using","title":"Examples"},{"location":"#additional-infrastructure-blocks","text":"If you wish to extend your infrastructure you can pick up additional modules on the clusterfrak-dynamics github page","title":"Additional infrastructure blocks"},{"location":"#branches","text":"master : Backward incompatible with v1.X but compatible with v2.X, releases bumped to v3.X because a lot has changed. release-1.X : Compatible with Terraform < 0.12 and Terragrunt < 0.19. Be sure to target the same modules version. release-2.X : Compatible with Terraform >= 0.12 and Terragrunt >= 0.19. Be sure to target the same modules version.","title":"Branches"},{"location":"#license","text":"","title":"License"},{"location":"user-guides/ecr/","text":"ECR module \u00b6 ecr is a custom module maintained here and allows creation of AWS ECR repository to host docker images. It provides: ECR repository ECR repository policy Custom IAM user with Access Key and Secret Key to be able to push images to ECR (eg. for CI purposes) Customization \u00b6 Just like the other modules, custom configuration is done in terragrunt.hcl . i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/clusterfrak-dynamics/terraform-aws-ecr.git?ref=v2.1.0\" } locals { aws_regio n = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] projec t = \"namespace\" pre f ix = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"prefix\" ] cus t om_ ta gs = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) } i n pu ts = { e n v = local.e n v projec t = local.projec t pre f ix = local.pre f ix aws = { \"region\" = local.aws_regio n } cus t om_ ta gs = merge( local.cus t om_ ta gs ) regis tr ies = [ { na me = \"${local.project}/myapp\" image_ ta g_mu ta bili t y = \"MUTABLE\" sca n _o n _push = true }, ] regis tr ies_policies = [ ] }","title":"ECR"},{"location":"user-guides/ecr/#ecr-module","text":"ecr is a custom module maintained here and allows creation of AWS ECR repository to host docker images. It provides: ECR repository ECR repository policy Custom IAM user with Access Key and Secret Key to be able to push images to ECR (eg. for CI purposes)","title":"ECR module"},{"location":"user-guides/ecr/#customization","text":"Just like the other modules, custom configuration is done in terragrunt.hcl . i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/clusterfrak-dynamics/terraform-aws-ecr.git?ref=v2.1.0\" } locals { aws_regio n = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] projec t = \"namespace\" pre f ix = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"prefix\" ] cus t om_ ta gs = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) } i n pu ts = { e n v = local.e n v projec t = local.projec t pre f ix = local.pre f ix aws = { \"region\" = local.aws_regio n } cus t om_ ta gs = merge( local.cus t om_ ta gs ) regis tr ies = [ { na me = \"${local.project}/myapp\" image_ ta g_mu ta bili t y = \"MUTABLE\" sca n _o n _push = true }, ] regis tr ies_policies = [ ] }","title":"Customization"},{"location":"user-guides/eks-addons/","text":"EKS addons module \u00b6 eks-addons is a custom module maintained here and provides either: helm v3 charts manifests operators For commonly used addons one Kubernetes and most specifically with EKS. The deployments are curated to be tightly integrated with AWS and EKS. The following addons are available and work out of the box. Helm charts \u00b6 All charts have been tested with Helm v3 and the terraform-provider-helm v1.0 which supports Helm v3. They can be easily customize with custom values. cluster-autoscaler : scale worker nodes based on workload. external-dns : sync ingress and service records in route53. cert-manager : automatically generate TLS certificates, supports ACME v2. kiam : prevents pods to access EC2 metadata and enables pods to assume specific AWS IAM roles. nginx-ingress : processes Ingress object and acts as a HTTP/HTTPS proxy (compatible with cert-manager). metrics-server : enable metrics API and horizontal pod scaling (HPA). prometheus-operator : Monitoring / Alerting / Dashboards. fluentd-cloudwatch : forwards logs to AWS Cloudwatch. node-problem-detector : Forwards node problems to Kubernetes events flux : Continuous Delivery with Gitops workflow. sealed-secrets : Technology agnostic, store secrets on git. kong : API Gateway ingress controller. keycloak : Identity and access management Kubernetes Manifests \u00b6 Kubernetes manifests are deployed with terraform-provider-kubectl cni-metrics-helper : Provides cloudwatch metrics for VPC CNI plugins. Operator \u00b6 Some project are transitioning to Operators . Istio is going to drop Helm support and is not compatible with Helm v3 so it has been removed and replaced with the Istio operator istio-operator : Service mesh for Kubernetes. IAM permissions \u00b6 Some addons require specific IAM permission. This can be done by either: IRSA: IAM role for service account which is the default and recommended way Kiam Addons that need IAM access have two variables: create_resources_irsa : default to true and uses IAM role for service account create_resources_kiam : default to false and uses KIAM to manage IAM permissions There is no specific config, everything is taken care of by the module. Customization \u00b6 All the configuration is done in eks-addons/terragrunt.hcl . i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/clusterfrak-dynamics/terraform-kubernetes-addons.git?ref=v5.10.0\" } locals { e n v = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] aws_regio n = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] de fault _domai n _ na me = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"default_domain_name\" ] } depe n de n cy \"eks\" { co nf ig_pa t h = \"../eks\" mock_ou t pu ts = { clus ter _id = \"cluster-name\" clus ter _oidc_issuer_url = \"https://oidc.eks.eu-west-3.amazonaws.com/id/0000000000000000\" } } depe n de n cy \"vpc\" { co nf ig_pa t h = \"../vpc\" mock_ou t pu ts = { priva te _sub nets _cidr_blocks = [ \"10.0.0.0/16\" , \"192.168.0.0/24\" ] } } ge nerate \"provider\" { pa t h = \"provider.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF provider \"aws\" { regio n = \"${local.aws_region}\" } provider \"kubectl\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } provider \"kubernetes\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } provider \"helm\" { versio n = \"~> 1.0\" kuber netes { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } } da ta \"aws_eks_cluster\" \"cluster\" { na me = var.clus ter - na me } da ta \"aws_eks_cluster_auth\" \"cluster\" { na me = var.clus ter - na me } EOF } ge nerate \"backend\" { pa t h = \"backend.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF terraf orm { backe n d \"s3\" {} } EOF } i n pu ts = { clus ter - na me = depe n de n cy.eks.ou t pu ts .clus ter _id eks = { \"cluster_oidc_issuer_url\" = depe n de n cy.eks.ou t pu ts .clus ter _oidc_issuer_url } calico = { e na bled = true } alb_i n gress = { e na bled = true } aws_ n ode_ ter mi nat io n _ha n dler = { e na bled = true } n gi n x_i n gress = { e na bled = true } is t io_opera t or = { e na bled = true } clus ter _au t oscaler = { e na bled = true clus ter _ na me = depe n de n cy.eks.ou t pu ts .clus ter _id ex tra _values = << -E XTRA_VALUES image : reposi t ory : eu.gcr.io/k 8 s - ar t i fa c ts - prod/au t oscali n g/clus ter - au t oscaler EXTRA_VALUES } ex ternal _d ns = { e na bled = true } cer t _ma na ger = { e na bled = true acme_email = \"kevin@particule.io\" e na ble_de fault _clus ter _issuers = true allowed_cidrs = depe n de n cy.vpc.ou t pu ts .priva te _sub nets _cidr_blocks } me tr ics_server = { e na bled = true allowed_cidrs = depe n de n cy.vpc.ou t pu ts .priva te _sub nets _cidr_blocks } flu x = { e na bled = true ex tra _values = << -E XTRA_VALUES gi t : url : \"ssh://git@gitlab.com/myrepo/gitops-${local.env}.git\" pollI nter val : \"2m\" rbac : crea te : false regis tr y : au t oma t io n I nter val : \"5m\" EXTRA_VALUES } prome t heus_opera t or = { e na bled = true allowed_cidrs = depe n de n cy.vpc.ou t pu ts .priva te _sub nets _cidr_blocks ex tra _values = << -E XTRA_VALUES gra fana : deployme nt S trate gy : t ype : Recrea te i n gress : e na bled : true a nn o tat io ns : kuber netes .io/i n gress.class : n gi n x cer t - ma na ger.io/clus ter - issuer : \"letsencrypt\" hos ts : - gra fana .$ { local.de fault _domai n _ na me } tls : - secre t Name : gra fana .$ { local.de fault _domai n _ na me } hos ts : - gra fana .$ { local.de fault _domai n _ na me } persis ten ce : e na bled : true s t orageClassName : gp 2 accessModes : - ReadWri te O n ce size : 10 Gi prome t heus : prome t heusSpec : replicas : 1 re tent io n : 180 d ruleSelec t orNilUsesHelmValues : false serviceMo n i t orSelec t orNilUsesHelmValues : false s t orageSpec : volumeClaimTempla te : spec : s t orageClassName : gp 2 accessModes : [ \"ReadWriteOnce\" ] resources : reques ts : s t orage : 50 Gi EXTRA_VALUES } fluent d_cloudwa t ch = { e na bled = false } aws_ fluent _bi t = { e na bled = true } n pd = { e na bled = true } sealed_secre ts = { e na bled = true } c n i_me tr ics_helper = { e na bled = true } ko n g = { e na bled = false } keycloak = { e na bled = false } karma = { e na bled = true ex tra _values = << -E XTRA_VALUES i n gress : e na bled : true pa t h : / a nn o tat io ns : kuber netes .io/i n gress.class : n gi n x cer t - ma na ger.io/clus ter - issuer : \"letsencrypt\" hos ts : - karma.$ { local.de fault _domai n _ na me } tls : - secre t Name : karma.$ { local.de fault _domai n _ na me } hos ts : - karma.$ { local.de fault _domai n _ na me } e n v : - na me : ALERTMANAGER_URI value : \"http://prometheus-operator-alertmanager.monitoring.svc.cluster.local:9093\" - na me : ALERTMANAGER_PROXY value : \"true\" - na me : FILTERS_DEFAULT value : \"@state=active severity!=info severity!=none\" EXTRA_VALUES } } Default charts values \u00b6 Some values are defined by default directly into the module. These can off course be overridden and or merged/replaced. You can find the defaults values in the upstream module . Eg. default values for cluster-autoscaler are in cluster-autoscaler.tf Overriding Helm provider values \u00b6 Helm provider have defaults values defined here : helm_de faults _de faults = { a t omic = false clea nu p_o n _ fa il = false depe n de n cy_upda te = false disable_crd_hooks = false disable_webhooks = false f orce_upda te = false recrea te _pods = false re n der_subchar t _ n o tes = true replace = false rese t _values = false reuse_values = false skip_crds = false t imeou t = 3600 veri f y = false wai t = true ex tra _values = \"\" } These can be overridden globally with the helm_defaults input variable or can be overridden per chart in terragrunt.hcl : helm_de faults = { replace = true veri f y = true t imeou t = 300 } clus ter _au t oscaler = { crea te _iam_resources_kiam = false crea te _iam_resources_irsa = true iam_policy_override = \"\" versio n = \"v1.14.7\" char t _versio n = \"6.4.0\" e na bled = true de fault _ net work_policy = true clus ter _ na me = depe n de n cy.eks.ou t pu ts .clus ter _id t imeou t = 3600 <= here you ca n add a n y helm provider override } Overriding charts values.yaml \u00b6 It is possible to add or override values per charts. Helm provider use the same merge logic as Helm so you can basically rewrite the whole values.yaml if needed. Each chart has a extra_values variable where you can specify custom values. flu x = { crea te _iam_resources_kiam = false crea te _iam_resources_irsa = true versio n = \"1.18.0\" char t _versio n = \"1.2.0\" e na bled = false de fault _ net work_policy = true ex tra _values = <<EXTRA_VALUES gi t : url : \"ssh://git@gitlab.com/myrepo/gitops-${local.env}.git\" pollI nter val : \"2m\" rbac : crea te : false regis tr y : au t oma t io n I nter val : \"2m\" EXTRA_VALUES There are some examples in the terragrunt.hcl file. Not all the variables available are present. If you want a full list of variable, you can find them in the upstream module . For example for cluster-autoscaler you can see the default here .","title":"EKS Addons"},{"location":"user-guides/eks-addons/#eks-addons-module","text":"eks-addons is a custom module maintained here and provides either: helm v3 charts manifests operators For commonly used addons one Kubernetes and most specifically with EKS. The deployments are curated to be tightly integrated with AWS and EKS. The following addons are available and work out of the box.","title":"EKS addons module"},{"location":"user-guides/eks-addons/#helm-charts","text":"All charts have been tested with Helm v3 and the terraform-provider-helm v1.0 which supports Helm v3. They can be easily customize with custom values. cluster-autoscaler : scale worker nodes based on workload. external-dns : sync ingress and service records in route53. cert-manager : automatically generate TLS certificates, supports ACME v2. kiam : prevents pods to access EC2 metadata and enables pods to assume specific AWS IAM roles. nginx-ingress : processes Ingress object and acts as a HTTP/HTTPS proxy (compatible with cert-manager). metrics-server : enable metrics API and horizontal pod scaling (HPA). prometheus-operator : Monitoring / Alerting / Dashboards. fluentd-cloudwatch : forwards logs to AWS Cloudwatch. node-problem-detector : Forwards node problems to Kubernetes events flux : Continuous Delivery with Gitops workflow. sealed-secrets : Technology agnostic, store secrets on git. kong : API Gateway ingress controller. keycloak : Identity and access management","title":"Helm charts"},{"location":"user-guides/eks-addons/#kubernetes-manifests","text":"Kubernetes manifests are deployed with terraform-provider-kubectl cni-metrics-helper : Provides cloudwatch metrics for VPC CNI plugins.","title":"Kubernetes Manifests"},{"location":"user-guides/eks-addons/#operator","text":"Some project are transitioning to Operators . Istio is going to drop Helm support and is not compatible with Helm v3 so it has been removed and replaced with the Istio operator istio-operator : Service mesh for Kubernetes.","title":"Operator"},{"location":"user-guides/eks-addons/#iam-permissions","text":"Some addons require specific IAM permission. This can be done by either: IRSA: IAM role for service account which is the default and recommended way Kiam Addons that need IAM access have two variables: create_resources_irsa : default to true and uses IAM role for service account create_resources_kiam : default to false and uses KIAM to manage IAM permissions There is no specific config, everything is taken care of by the module.","title":"IAM permissions"},{"location":"user-guides/eks-addons/#customization","text":"All the configuration is done in eks-addons/terragrunt.hcl . i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/clusterfrak-dynamics/terraform-kubernetes-addons.git?ref=v5.10.0\" } locals { e n v = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] aws_regio n = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] de fault _domai n _ na me = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"default_domain_name\" ] } depe n de n cy \"eks\" { co nf ig_pa t h = \"../eks\" mock_ou t pu ts = { clus ter _id = \"cluster-name\" clus ter _oidc_issuer_url = \"https://oidc.eks.eu-west-3.amazonaws.com/id/0000000000000000\" } } depe n de n cy \"vpc\" { co nf ig_pa t h = \"../vpc\" mock_ou t pu ts = { priva te _sub nets _cidr_blocks = [ \"10.0.0.0/16\" , \"192.168.0.0/24\" ] } } ge nerate \"provider\" { pa t h = \"provider.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF provider \"aws\" { regio n = \"${local.aws_region}\" } provider \"kubectl\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } provider \"kubernetes\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } provider \"helm\" { versio n = \"~> 1.0\" kuber netes { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } } da ta \"aws_eks_cluster\" \"cluster\" { na me = var.clus ter - na me } da ta \"aws_eks_cluster_auth\" \"cluster\" { na me = var.clus ter - na me } EOF } ge nerate \"backend\" { pa t h = \"backend.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF terraf orm { backe n d \"s3\" {} } EOF } i n pu ts = { clus ter - na me = depe n de n cy.eks.ou t pu ts .clus ter _id eks = { \"cluster_oidc_issuer_url\" = depe n de n cy.eks.ou t pu ts .clus ter _oidc_issuer_url } calico = { e na bled = true } alb_i n gress = { e na bled = true } aws_ n ode_ ter mi nat io n _ha n dler = { e na bled = true } n gi n x_i n gress = { e na bled = true } is t io_opera t or = { e na bled = true } clus ter _au t oscaler = { e na bled = true clus ter _ na me = depe n de n cy.eks.ou t pu ts .clus ter _id ex tra _values = << -E XTRA_VALUES image : reposi t ory : eu.gcr.io/k 8 s - ar t i fa c ts - prod/au t oscali n g/clus ter - au t oscaler EXTRA_VALUES } ex ternal _d ns = { e na bled = true } cer t _ma na ger = { e na bled = true acme_email = \"kevin@particule.io\" e na ble_de fault _clus ter _issuers = true allowed_cidrs = depe n de n cy.vpc.ou t pu ts .priva te _sub nets _cidr_blocks } me tr ics_server = { e na bled = true allowed_cidrs = depe n de n cy.vpc.ou t pu ts .priva te _sub nets _cidr_blocks } flu x = { e na bled = true ex tra _values = << -E XTRA_VALUES gi t : url : \"ssh://git@gitlab.com/myrepo/gitops-${local.env}.git\" pollI nter val : \"2m\" rbac : crea te : false regis tr y : au t oma t io n I nter val : \"5m\" EXTRA_VALUES } prome t heus_opera t or = { e na bled = true allowed_cidrs = depe n de n cy.vpc.ou t pu ts .priva te _sub nets _cidr_blocks ex tra _values = << -E XTRA_VALUES gra fana : deployme nt S trate gy : t ype : Recrea te i n gress : e na bled : true a nn o tat io ns : kuber netes .io/i n gress.class : n gi n x cer t - ma na ger.io/clus ter - issuer : \"letsencrypt\" hos ts : - gra fana .$ { local.de fault _domai n _ na me } tls : - secre t Name : gra fana .$ { local.de fault _domai n _ na me } hos ts : - gra fana .$ { local.de fault _domai n _ na me } persis ten ce : e na bled : true s t orageClassName : gp 2 accessModes : - ReadWri te O n ce size : 10 Gi prome t heus : prome t heusSpec : replicas : 1 re tent io n : 180 d ruleSelec t orNilUsesHelmValues : false serviceMo n i t orSelec t orNilUsesHelmValues : false s t orageSpec : volumeClaimTempla te : spec : s t orageClassName : gp 2 accessModes : [ \"ReadWriteOnce\" ] resources : reques ts : s t orage : 50 Gi EXTRA_VALUES } fluent d_cloudwa t ch = { e na bled = false } aws_ fluent _bi t = { e na bled = true } n pd = { e na bled = true } sealed_secre ts = { e na bled = true } c n i_me tr ics_helper = { e na bled = true } ko n g = { e na bled = false } keycloak = { e na bled = false } karma = { e na bled = true ex tra _values = << -E XTRA_VALUES i n gress : e na bled : true pa t h : / a nn o tat io ns : kuber netes .io/i n gress.class : n gi n x cer t - ma na ger.io/clus ter - issuer : \"letsencrypt\" hos ts : - karma.$ { local.de fault _domai n _ na me } tls : - secre t Name : karma.$ { local.de fault _domai n _ na me } hos ts : - karma.$ { local.de fault _domai n _ na me } e n v : - na me : ALERTMANAGER_URI value : \"http://prometheus-operator-alertmanager.monitoring.svc.cluster.local:9093\" - na me : ALERTMANAGER_PROXY value : \"true\" - na me : FILTERS_DEFAULT value : \"@state=active severity!=info severity!=none\" EXTRA_VALUES } }","title":"Customization"},{"location":"user-guides/eks-addons/#default-charts-values","text":"Some values are defined by default directly into the module. These can off course be overridden and or merged/replaced. You can find the defaults values in the upstream module . Eg. default values for cluster-autoscaler are in cluster-autoscaler.tf","title":"Default charts values"},{"location":"user-guides/eks-addons/#overriding-helm-provider-values","text":"Helm provider have defaults values defined here : helm_de faults _de faults = { a t omic = false clea nu p_o n _ fa il = false depe n de n cy_upda te = false disable_crd_hooks = false disable_webhooks = false f orce_upda te = false recrea te _pods = false re n der_subchar t _ n o tes = true replace = false rese t _values = false reuse_values = false skip_crds = false t imeou t = 3600 veri f y = false wai t = true ex tra _values = \"\" } These can be overridden globally with the helm_defaults input variable or can be overridden per chart in terragrunt.hcl : helm_de faults = { replace = true veri f y = true t imeou t = 300 } clus ter _au t oscaler = { crea te _iam_resources_kiam = false crea te _iam_resources_irsa = true iam_policy_override = \"\" versio n = \"v1.14.7\" char t _versio n = \"6.4.0\" e na bled = true de fault _ net work_policy = true clus ter _ na me = depe n de n cy.eks.ou t pu ts .clus ter _id t imeou t = 3600 <= here you ca n add a n y helm provider override }","title":"Overriding Helm provider values"},{"location":"user-guides/eks-addons/#overriding-charts-valuesyaml","text":"It is possible to add or override values per charts. Helm provider use the same merge logic as Helm so you can basically rewrite the whole values.yaml if needed. Each chart has a extra_values variable where you can specify custom values. flu x = { crea te _iam_resources_kiam = false crea te _iam_resources_irsa = true versio n = \"1.18.0\" char t _versio n = \"1.2.0\" e na bled = false de fault _ net work_policy = true ex tra _values = <<EXTRA_VALUES gi t : url : \"ssh://git@gitlab.com/myrepo/gitops-${local.env}.git\" pollI nter val : \"2m\" rbac : crea te : false regis tr y : au t oma t io n I nter val : \"2m\" EXTRA_VALUES There are some examples in the terragrunt.hcl file. Not all the variables available are present. If you want a full list of variable, you can find them in the upstream module . For example for cluster-autoscaler you can see the default here .","title":"Overriding charts values.yaml"},{"location":"user-guides/eks-namespaces/","text":"EKS namespaces module \u00b6 eks-namespace is a custom module maintained here and allow to create and manage Kubernetes namespaces with Terragrunt/Terraform. It provides: Namespaces quotas Namesapces limitranges Customization \u00b6 Just like the other modules, custom configuration is done in terragrunt.hcl . It takes a list of namespaces with their configuration as an input variable. i n clude { pa t h = \"${find_in_parent_folders()}\" } depe n de n cies { pa t hs = [ \"../eks\" ] } terraf orm { source = \"github.com/clusterfrak-dynamics/terraform-kubernetes-namespaces.git?ref=v4.0.1\" } locals { aws_regio n = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] } depe n de n cy \"eks\" { co nf ig_pa t h = \"../eks\" mock_ou t pu ts = { clus ter _id = \"cluster-name\" } } i n pu ts = { aws = { \"region\" = local.aws_regio n } e n v = local.e n v na mespaces = [ { \"name\" = \"myapp-${local.env}\" \"kiam_allowed_regexp\" = \"^$\" \"requests.cpu\" = \"50\" \"requests.memory\" = \"10Gi\" \"pods\" = \"100\" \"count/cronjobs.batch\" = \"100\" \"count/ingresses.extensions\" = \"5\" \"requests.nvidia.com/gpu\" = \"0\" \"services.loadbalancers\" = \"0\" \"services.nodeports\" = \"0\" \"services\" = \"10\" }, ] }","title":"EKS Namespaces"},{"location":"user-guides/eks-namespaces/#eks-namespaces-module","text":"eks-namespace is a custom module maintained here and allow to create and manage Kubernetes namespaces with Terragrunt/Terraform. It provides: Namespaces quotas Namesapces limitranges","title":"EKS namespaces module"},{"location":"user-guides/eks-namespaces/#customization","text":"Just like the other modules, custom configuration is done in terragrunt.hcl . It takes a list of namespaces with their configuration as an input variable. i n clude { pa t h = \"${find_in_parent_folders()}\" } depe n de n cies { pa t hs = [ \"../eks\" ] } terraf orm { source = \"github.com/clusterfrak-dynamics/terraform-kubernetes-namespaces.git?ref=v4.0.1\" } locals { aws_regio n = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${get_terragrunt_dir()}/${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] } depe n de n cy \"eks\" { co nf ig_pa t h = \"../eks\" mock_ou t pu ts = { clus ter _id = \"cluster-name\" } } i n pu ts = { aws = { \"region\" = local.aws_regio n } e n v = local.e n v na mespaces = [ { \"name\" = \"myapp-${local.env}\" \"kiam_allowed_regexp\" = \"^$\" \"requests.cpu\" = \"50\" \"requests.memory\" = \"10Gi\" \"pods\" = \"100\" \"count/cronjobs.batch\" = \"100\" \"count/ingresses.extensions\" = \"5\" \"requests.nvidia.com/gpu\" = \"0\" \"services.loadbalancers\" = \"0\" \"services.nodeports\" = \"0\" \"services\" = \"10\" }, ] }","title":"Customization"},{"location":"user-guides/eks/","text":"EKS module \u00b6 Upstream configuration \u00b6 EKS module is also upstream and allow to deploy an EKS cluster which supports: managed node pools launch configuration node pools launch template node pools tEKS uses launch template by default and use one node pool per availability zone. You can use any inputs from the upstream module to configure the cluster in eks/terragrunt.hcl . i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/terraform-aws-modules/terraform-aws-eks?ref=v12.2.0\" a fter _hook \"kubeconfig\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"terraform output kubeconfig 2>/dev/null > ${get_terragrunt_dir()}/kubeconfig\" ] } a fter _hook \"kubeconfig-tg\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"terraform output kubeconfig 2>/dev/null > kubeconfig\" ] } a fter _hook \"kube-system-label\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig label ns kube-system name=kube-system --overwrite\" ] } a fter _hook \"remove-default-psp\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig delete psp eks.privileged || true\" ] } a fter _hook \"remove-default-psp-clusterrolebindind\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig delete clusterrolebinding eks:podsecuritypolicy:authenticated || true\" ] } a fter _hook \"remove-default-psp-clusterrole\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig delete clusterrole eks:podsecuritypolicy:privileged || true\" ] } } locals { aws_regio n = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] aws_accou nt _id = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_account_id\" ] cus t om_ ta gs = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) pre f ix = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"prefix\" ] clus ter _ na me = \"${local.prefix}-${local.env}\" } depe n de n cy \"vpc\" { co nf ig_pa t h = \"../vpc\" mock_ou t pu ts = { vpc_id = \"vpc-00000000\" priva te _sub nets = [ \"subnet-00000000\" , \"subnet-00000001\" , \"subnet-00000002\" , ] } } ge nerate \"provider\" { pa t h = \"provider.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF provider \"aws\" { regio n = \"${local.aws_region}\" } provider \"kubectl\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } provider \"kubernetes\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } da ta \"aws_eks_cluster\" \"cluster\" { na me = aws_eks_clus ter . t his [ 0 ] .id } da ta \"aws_eks_cluster_auth\" \"cluster\" { na me = aws_eks_clus ter . t his [ 0 ] .id } EOF } ge nerate \"backend\" { pa t h = \"backend.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF terraf orm { backe n d \"s3\" {} } EOF } i n pu ts = { aws = { \"region\" = local.aws_regio n } psp_privileged_ ns = [ \"istio-system\" , \"istio-operator\" , \"monitoring\" , \"aws-alb-ingress-controller\" , \"aws-for-fluent-bit\" ] ta gs = merge( local.cus t om_ ta gs ) clus ter _ na me = local.clus ter _ na me sub nets = depe n de n cy.vpc.ou t pu ts .priva te _sub nets vpc_id = depe n de n cy.vpc.ou t pu ts .vpc_id wri te _kubeco nf ig = true e na ble_irsa = true kubeco nf ig_aws_au t he nt ica t or_comma n d = \"aws\" kubeco nf ig_aws_au t he nt ica t or_comma n d_args = [ \"eks\" , \"get-token\" , \"--cluster-name\" , local.clus ter _ na me ] kubeco nf ig_aws_au t he nt ica t or_addi t io nal _args = [] clus ter _versio n = \"1.17\" clus ter _e na bled_log_ t ypes = [ \"api\" , \"audit\" , \"authenticator\" , \"controllerManager\" , \"scheduler\" ] n ode_groups = { \"default-${local.aws_region}a\" = { desired_capaci t y = 1 max_capaci t y = 3 mi n _capaci t y = 1 i nstan ce_ t ype = \"t3.medium\" sub nets = [ depe n de n cy.vpc.ou t pu ts .priva te _sub nets [ 0 ]] disk_size = 50 } \"default-${local.aws_region}b\" = { desired_capaci t y = 1 max_capaci t y = 3 mi n _capaci t y = 1 i nstan ce_ t ype = \"t3.medium\" sub nets = [ depe n de n cy.vpc.ou t pu ts .priva te _sub nets [ 1 ]] disk_size = 50 } \"default-${local.aws_region}c\" = { desired_capaci t y = 1 max_capaci t y = 3 mi n _capaci t y = 1 i nstan ce_ t ype = \"t3.medium\" sub nets = [ depe n de n cy.vpc.ou t pu ts .priva te _sub nets [ 2 ]] disk_size = 50 } } } Customizations \u00b6 Besides the upstream module, there are some customizations. If you look at the directory structure: . \u251c\u2500\u2500 manifests \u2502 \u251c\u2500\u2500 calico.yaml \u2502 \u251c\u2500\u2500 psp-default-clusterrole.yaml \u2502 \u251c\u2500\u2500 psp-default-clusterrolebinding.yaml \u2502 \u251c\u2500\u2500 psp-default.yaml \u2502 \u251c\u2500\u2500 psp-privileged-clusterrole.yaml \u2502 \u251c\u2500\u2500 psp-privileged-clusterrolebinding.yaml \u2502 \u251c\u2500\u2500 psp-privileged-node-rolebinding.yaml \u2502 \u2514\u2500\u2500 psp-privileged.yaml \u251c\u2500\u2500 manifests.tf \u251c\u2500\u2500 providers.tf \u2514\u2500\u2500 terragrunt.hcl Terragrunt hooks \u00b6 In addition to the upstream module there is some hooks included, these hooks can be remove if necessary. In order: Download the terraform-provider-kubectl to manage manifests (necessary if using `manifests.tf) Copy the kubeconfig locally Label the kube-system namespace with its name Remove the defaults EKS podSecurityPolicies (see #401 ) Custom manifests \u00b6 terraform-provider-kubectl allows to deploy Kubernetes manifests in a cleaner way than using a local-exec . manifests.tf is parsing the manifest folder and applying them to the cluster. Calico \u00b6 Calico is used to enable network policies enforcement on the cluster. To disable calico you can remove the calico.yaml file. Pod Security Policies \u00b6 The default EKS Pod Security Policies is privileged. By default it is removed (by the previous hooks) and more sensible non privileged default pod security policies are deployed: all the service account in kube-system can use privileged --- apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : name : privileged annotations : seccomp.security.alpha.kubernetes.io/allowedProfileNames : '*' spec : privileged : true allowPrivilegeEscalation : true allowedCapabilities : [ '*' ] volumes : [ '*' ] hostNetwork : true hostPorts : - min : 0 max : 65535 hostIPC : true hostPID : true runAsUser : rule : 'RunAsAny' seLinux : rule : 'RunAsAny' supplementalGroups : rule : 'RunAsAny' fsGroup : rule : 'RunAsAny' any other authenticated user can use default --- apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : name : default annotations : seccomp.security.alpha.kubernetes.io/allowedProfileNames : 'docker/default' seccomp.security.alpha.kubernetes.io/defaultProfileName : 'docker/default' spec : privileged : false allowPrivilegeEscalation : false allowedCapabilities : [] # default set of capabilities are implicitly allowed volumes : - 'configMap' - 'emptyDir' - 'projected' - 'secret' - 'downwardAPI' - 'persistentVolumeClaim' hostNetwork : false hostIPC : false hostPID : false runAsUser : rule : 'MustRunAsNonRoot' runAsGroup : rule : 'MustRunAs' ranges : - min : 1 max : 65535 seLinux : rule : 'RunAsAny' supplementalGroups : rule : 'MustRunAs' ranges : - min : 1 max : 65535 fsGroup : rule : 'MustRunAs' ranges : - min : 1 max : 65535 The input variable psp_privileged_ns allow to give privileged to services account inside a namespace. Eg. in terragrunt.hcl : psp_privileged_ ns = [ \"cluster-autoscaler\" , #wai t i n g f or h tt ps : //gi t hub.com/helm/char ts /pull/ 20891 \"istio-system\" #is t io does n o t suppor t psp by de fault ] This gives to all the service accounts inside cluster-autoscaler and istio-system access to the privileged pod security policy. \u00b6","title":"EKS"},{"location":"user-guides/eks/#eks-module","text":"","title":"EKS module"},{"location":"user-guides/eks/#upstream-configuration","text":"EKS module is also upstream and allow to deploy an EKS cluster which supports: managed node pools launch configuration node pools launch template node pools tEKS uses launch template by default and use one node pool per availability zone. You can use any inputs from the upstream module to configure the cluster in eks/terragrunt.hcl . i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/terraform-aws-modules/terraform-aws-eks?ref=v12.2.0\" a fter _hook \"kubeconfig\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"terraform output kubeconfig 2>/dev/null > ${get_terragrunt_dir()}/kubeconfig\" ] } a fter _hook \"kubeconfig-tg\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"terraform output kubeconfig 2>/dev/null > kubeconfig\" ] } a fter _hook \"kube-system-label\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig label ns kube-system name=kube-system --overwrite\" ] } a fter _hook \"remove-default-psp\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig delete psp eks.privileged || true\" ] } a fter _hook \"remove-default-psp-clusterrolebindind\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig delete clusterrolebinding eks:podsecuritypolicy:authenticated || true\" ] } a fter _hook \"remove-default-psp-clusterrole\" { comma n ds = [ \"apply\" ] execu te = [ \"bash\" , \"-c\" , \"kubectl --kubeconfig kubeconfig delete clusterrole eks:podsecuritypolicy:privileged || true\" ] } } locals { aws_regio n = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] aws_accou nt _id = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_account_id\" ] cus t om_ ta gs = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) pre f ix = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"prefix\" ] clus ter _ na me = \"${local.prefix}-${local.env}\" } depe n de n cy \"vpc\" { co nf ig_pa t h = \"../vpc\" mock_ou t pu ts = { vpc_id = \"vpc-00000000\" priva te _sub nets = [ \"subnet-00000000\" , \"subnet-00000001\" , \"subnet-00000002\" , ] } } ge nerate \"provider\" { pa t h = \"provider.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF provider \"aws\" { regio n = \"${local.aws_region}\" } provider \"kubectl\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } provider \"kubernetes\" { hos t = da ta .aws_eks_clus ter .clus ter .e n dpoi nt clus ter _ca_cer t i f ica te = base 64 decode(da ta .aws_eks_clus ter .clus ter .cer t i f ica te _au t hori t y. 0. da ta ) t oke n = da ta .aws_eks_clus ter _au t h.clus ter . t oke n load_co nf ig_ f ile = false } da ta \"aws_eks_cluster\" \"cluster\" { na me = aws_eks_clus ter . t his [ 0 ] .id } da ta \"aws_eks_cluster_auth\" \"cluster\" { na me = aws_eks_clus ter . t his [ 0 ] .id } EOF } ge nerate \"backend\" { pa t h = \"backend.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF terraf orm { backe n d \"s3\" {} } EOF } i n pu ts = { aws = { \"region\" = local.aws_regio n } psp_privileged_ ns = [ \"istio-system\" , \"istio-operator\" , \"monitoring\" , \"aws-alb-ingress-controller\" , \"aws-for-fluent-bit\" ] ta gs = merge( local.cus t om_ ta gs ) clus ter _ na me = local.clus ter _ na me sub nets = depe n de n cy.vpc.ou t pu ts .priva te _sub nets vpc_id = depe n de n cy.vpc.ou t pu ts .vpc_id wri te _kubeco nf ig = true e na ble_irsa = true kubeco nf ig_aws_au t he nt ica t or_comma n d = \"aws\" kubeco nf ig_aws_au t he nt ica t or_comma n d_args = [ \"eks\" , \"get-token\" , \"--cluster-name\" , local.clus ter _ na me ] kubeco nf ig_aws_au t he nt ica t or_addi t io nal _args = [] clus ter _versio n = \"1.17\" clus ter _e na bled_log_ t ypes = [ \"api\" , \"audit\" , \"authenticator\" , \"controllerManager\" , \"scheduler\" ] n ode_groups = { \"default-${local.aws_region}a\" = { desired_capaci t y = 1 max_capaci t y = 3 mi n _capaci t y = 1 i nstan ce_ t ype = \"t3.medium\" sub nets = [ depe n de n cy.vpc.ou t pu ts .priva te _sub nets [ 0 ]] disk_size = 50 } \"default-${local.aws_region}b\" = { desired_capaci t y = 1 max_capaci t y = 3 mi n _capaci t y = 1 i nstan ce_ t ype = \"t3.medium\" sub nets = [ depe n de n cy.vpc.ou t pu ts .priva te _sub nets [ 1 ]] disk_size = 50 } \"default-${local.aws_region}c\" = { desired_capaci t y = 1 max_capaci t y = 3 mi n _capaci t y = 1 i nstan ce_ t ype = \"t3.medium\" sub nets = [ depe n de n cy.vpc.ou t pu ts .priva te _sub nets [ 2 ]] disk_size = 50 } } }","title":"Upstream configuration"},{"location":"user-guides/eks/#customizations","text":"Besides the upstream module, there are some customizations. If you look at the directory structure: . \u251c\u2500\u2500 manifests \u2502 \u251c\u2500\u2500 calico.yaml \u2502 \u251c\u2500\u2500 psp-default-clusterrole.yaml \u2502 \u251c\u2500\u2500 psp-default-clusterrolebinding.yaml \u2502 \u251c\u2500\u2500 psp-default.yaml \u2502 \u251c\u2500\u2500 psp-privileged-clusterrole.yaml \u2502 \u251c\u2500\u2500 psp-privileged-clusterrolebinding.yaml \u2502 \u251c\u2500\u2500 psp-privileged-node-rolebinding.yaml \u2502 \u2514\u2500\u2500 psp-privileged.yaml \u251c\u2500\u2500 manifests.tf \u251c\u2500\u2500 providers.tf \u2514\u2500\u2500 terragrunt.hcl","title":"Customizations"},{"location":"user-guides/eks/#terragrunt-hooks","text":"In addition to the upstream module there is some hooks included, these hooks can be remove if necessary. In order: Download the terraform-provider-kubectl to manage manifests (necessary if using `manifests.tf) Copy the kubeconfig locally Label the kube-system namespace with its name Remove the defaults EKS podSecurityPolicies (see #401 )","title":"Terragrunt hooks"},{"location":"user-guides/eks/#custom-manifests","text":"terraform-provider-kubectl allows to deploy Kubernetes manifests in a cleaner way than using a local-exec . manifests.tf is parsing the manifest folder and applying them to the cluster.","title":"Custom manifests"},{"location":"user-guides/eks/#calico","text":"Calico is used to enable network policies enforcement on the cluster. To disable calico you can remove the calico.yaml file.","title":"Calico"},{"location":"user-guides/eks/#pod-security-policies","text":"The default EKS Pod Security Policies is privileged. By default it is removed (by the previous hooks) and more sensible non privileged default pod security policies are deployed: all the service account in kube-system can use privileged --- apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : name : privileged annotations : seccomp.security.alpha.kubernetes.io/allowedProfileNames : '*' spec : privileged : true allowPrivilegeEscalation : true allowedCapabilities : [ '*' ] volumes : [ '*' ] hostNetwork : true hostPorts : - min : 0 max : 65535 hostIPC : true hostPID : true runAsUser : rule : 'RunAsAny' seLinux : rule : 'RunAsAny' supplementalGroups : rule : 'RunAsAny' fsGroup : rule : 'RunAsAny' any other authenticated user can use default --- apiVersion : policy/v1beta1 kind : PodSecurityPolicy metadata : name : default annotations : seccomp.security.alpha.kubernetes.io/allowedProfileNames : 'docker/default' seccomp.security.alpha.kubernetes.io/defaultProfileName : 'docker/default' spec : privileged : false allowPrivilegeEscalation : false allowedCapabilities : [] # default set of capabilities are implicitly allowed volumes : - 'configMap' - 'emptyDir' - 'projected' - 'secret' - 'downwardAPI' - 'persistentVolumeClaim' hostNetwork : false hostIPC : false hostPID : false runAsUser : rule : 'MustRunAsNonRoot' runAsGroup : rule : 'MustRunAs' ranges : - min : 1 max : 65535 seLinux : rule : 'RunAsAny' supplementalGroups : rule : 'MustRunAs' ranges : - min : 1 max : 65535 fsGroup : rule : 'MustRunAs' ranges : - min : 1 max : 65535 The input variable psp_privileged_ns allow to give privileged to services account inside a namespace. Eg. in terragrunt.hcl : psp_privileged_ ns = [ \"cluster-autoscaler\" , #wai t i n g f or h tt ps : //gi t hub.com/helm/char ts /pull/ 20891 \"istio-system\" #is t io does n o t suppor t psp by de fault ] This gives to all the service accounts inside cluster-autoscaler and istio-system access to the privileged pod security policy.","title":"Pod Security Policies"},{"location":"user-guides/eks/#_1","text":"","title":""},{"location":"user-guides/getting-started/","text":"Getting started \u00b6 Tooling requirements \u00b6 The necessary tools are in requirements.yaml you can install them any way you want, make sure they are available in your $PATH. The following dependencies are required on the deployer host: Terraform Terragrunt kubectl helm aws-iam-authenticator AWS requirements \u00b6 At least one AWS account awscli configured ( see installation instructions ) to access your AWS account. A route53 hosted zone if you plan to use external-dns or cert-manager but it is not a hard requirement. Getting the template repository \u00b6 You can either clone the repo locally or generate/fork a template from github. git clone https://github.com/clusterfrak-dynamics/teks.git --branch v6.0.0 The terraform directory structure is the following: . \u2514\u2500\u2500 live \u2514\u2500\u2500 demo \u251c\u2500\u2500 common_tags.yaml \u251c\u2500\u2500 common_values.yaml \u251c\u2500\u2500 eu-west-3 \u2502 \u251c\u2500\u2500 ecr \u2502 \u2502 \u251c\u2500\u2500 provider.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u251c\u2500\u2500 eks \u2502 \u2502 \u251c\u2500\u2500 kubeconfig \u2502 \u2502 \u251c\u2500\u2500 manifests \u2502 \u2502 \u2502 \u251c\u2500\u2500 calico.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-default-clusterrole.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-default-clusterrolebinding.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-default.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-privileged-clusterrole.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-privileged-clusterrolebinding.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-privileged-node-rolebinding.yaml \u2502 \u2502 \u2502 \u2514\u2500\u2500 psp-privileged.yaml \u2502 \u2502 \u251c\u2500\u2500 manifests.tf \u2502 \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u251c\u2500\u2500 eks-addons \u2502 \u2502 \u251c\u2500\u2500 examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 keycloak-values.yaml \u2502 \u2502 \u2502 \u2514\u2500\u2500 kong-values.yaml \u2502 \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u251c\u2500\u2500 eks-namespaces \u2502 \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u2514\u2500\u2500 vpc \u2502 \u251c\u2500\u2500 provider.tf \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2514\u2500\u2500 terragrunt.hcl Each cluster in inside the terraform/live folder and then modules are group by AWS region. Start a new cluster \u00b6 Create a new cluster beside demo : cp -ar demo mycluster Configuring Terragrunt remote state \u00b6 live/demo/terragrunt.hcl is the parent terragrunt file use to configure remote state. The configuration is done automatically from the common_values.yaml file. --- aws_account_id : 161285725140 aws_region : eu-west-3 prefix : cfd-particule default_domain_name : clusterfrak-dynamics.io The values here will generate automatically the parent terragrunt file. remo te _s tate { backe n d = \"s3\" co nf ig = { bucke t = \"${yamldecode(file(\" commo n _values.yaml \"))[\" pre f ix \"]}-tf-state-store-${yamldecode(file(\" commo n _ ta gs.yaml \"))[\" E n v \"]}-${yamldecode(file(\" commo n _values.yaml \"))[\" aws_regio n \"]}-particule\" key = \"${path_relative_to_include()}\" regio n = \"${yamldecode(file(\" commo n _values.yaml \"))[\" aws_regio n \"]}\" e n cryp t = true dy na modb_ ta ble = \"${yamldecode(file(\" commo n _values.yaml \"))[\" pre f ix \"]}-tf-state-store-lock-${yamldecode(file(\" commo n _ ta gs.yaml \"))[\" E n v \"]}-${yamldecode(file(\" commo n _values.yaml \"))[\" aws_regio n \"]}-particule\" } } #iam_role = \"arn:aws:iam::${yamldecode(file(\" commo n _values.yaml \"))[\" aws_accou nt _id \"]}:role/administrator\" You can either customize the values or edit directly the terragrunt.hcl file. Running Terragrunt command \u00b6 Terragrunt command are run inside their respective folder, for example, to run the vpc module: cd vpc terragrunt apply","title":"Getting started"},{"location":"user-guides/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"user-guides/getting-started/#tooling-requirements","text":"The necessary tools are in requirements.yaml you can install them any way you want, make sure they are available in your $PATH. The following dependencies are required on the deployer host: Terraform Terragrunt kubectl helm aws-iam-authenticator","title":"Tooling requirements"},{"location":"user-guides/getting-started/#aws-requirements","text":"At least one AWS account awscli configured ( see installation instructions ) to access your AWS account. A route53 hosted zone if you plan to use external-dns or cert-manager but it is not a hard requirement.","title":"AWS requirements"},{"location":"user-guides/getting-started/#getting-the-template-repository","text":"You can either clone the repo locally or generate/fork a template from github. git clone https://github.com/clusterfrak-dynamics/teks.git --branch v6.0.0 The terraform directory structure is the following: . \u2514\u2500\u2500 live \u2514\u2500\u2500 demo \u251c\u2500\u2500 common_tags.yaml \u251c\u2500\u2500 common_values.yaml \u251c\u2500\u2500 eu-west-3 \u2502 \u251c\u2500\u2500 ecr \u2502 \u2502 \u251c\u2500\u2500 provider.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u251c\u2500\u2500 eks \u2502 \u2502 \u251c\u2500\u2500 kubeconfig \u2502 \u2502 \u251c\u2500\u2500 manifests \u2502 \u2502 \u2502 \u251c\u2500\u2500 calico.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-default-clusterrole.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-default-clusterrolebinding.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-default.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-privileged-clusterrole.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-privileged-clusterrolebinding.yaml \u2502 \u2502 \u2502 \u251c\u2500\u2500 psp-privileged-node-rolebinding.yaml \u2502 \u2502 \u2502 \u2514\u2500\u2500 psp-privileged.yaml \u2502 \u2502 \u251c\u2500\u2500 manifests.tf \u2502 \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u251c\u2500\u2500 eks-addons \u2502 \u2502 \u251c\u2500\u2500 examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 keycloak-values.yaml \u2502 \u2502 \u2502 \u2514\u2500\u2500 kong-values.yaml \u2502 \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u251c\u2500\u2500 eks-namespaces \u2502 \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2502 \u2514\u2500\u2500 vpc \u2502 \u251c\u2500\u2500 provider.tf \u2502 \u2514\u2500\u2500 terragrunt.hcl \u2514\u2500\u2500 terragrunt.hcl Each cluster in inside the terraform/live folder and then modules are group by AWS region.","title":"Getting the template repository"},{"location":"user-guides/getting-started/#start-a-new-cluster","text":"Create a new cluster beside demo : cp -ar demo mycluster","title":"Start a new cluster"},{"location":"user-guides/getting-started/#configuring-terragrunt-remote-state","text":"live/demo/terragrunt.hcl is the parent terragrunt file use to configure remote state. The configuration is done automatically from the common_values.yaml file. --- aws_account_id : 161285725140 aws_region : eu-west-3 prefix : cfd-particule default_domain_name : clusterfrak-dynamics.io The values here will generate automatically the parent terragrunt file. remo te _s tate { backe n d = \"s3\" co nf ig = { bucke t = \"${yamldecode(file(\" commo n _values.yaml \"))[\" pre f ix \"]}-tf-state-store-${yamldecode(file(\" commo n _ ta gs.yaml \"))[\" E n v \"]}-${yamldecode(file(\" commo n _values.yaml \"))[\" aws_regio n \"]}-particule\" key = \"${path_relative_to_include()}\" regio n = \"${yamldecode(file(\" commo n _values.yaml \"))[\" aws_regio n \"]}\" e n cryp t = true dy na modb_ ta ble = \"${yamldecode(file(\" commo n _values.yaml \"))[\" pre f ix \"]}-tf-state-store-lock-${yamldecode(file(\" commo n _ ta gs.yaml \"))[\" E n v \"]}-${yamldecode(file(\" commo n _values.yaml \"))[\" aws_regio n \"]}-particule\" } } #iam_role = \"arn:aws:iam::${yamldecode(file(\" commo n _values.yaml \"))[\" aws_accou nt _id \"]}:role/administrator\" You can either customize the values or edit directly the terragrunt.hcl file.","title":"Configuring Terragrunt remote state"},{"location":"user-guides/getting-started/#running-terragrunt-command","text":"Terragrunt command are run inside their respective folder, for example, to run the vpc module: cd vpc terragrunt apply","title":"Running Terragrunt command"},{"location":"user-guides/vpc/","text":"VPC module \u00b6 The vpc module is the one from upstream . To customize it. Modify the vpc/terragrunt.hcl file. You can use any inputs available in the upstream module. i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/terraform-aws-modules/terraform-aws-vpc?ref=v2.48.0\" } locals { aws_regio n = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] pre f ix = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"prefix\" ] cus t om_ ta gs = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) } ge nerate \"provider\" { pa t h = \"provider.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF provider \"aws\" { regio n = \"${local.aws_region}\" } EOF } ge nerate \"backend\" { pa t h = \"backend.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF terraf orm { backe n d \"s3\" {} } EOF } i n pu ts = { ta gs = merge( { \"kubernetes.io/cluster/${local.prefix}-${local.env}\" = \"shared\" }, local.cus t om_ ta gs ) na me = \"vpc-eks-${local.env}\" cidr = \"10.0.0.0/16\" azs = [ \"${local.aws_region}a\" , \"${local.aws_region}b\" , \"${local.aws_region}c\" ] priva te _sub nets = [ \"10.0.1.0/24\" , \"10.0.2.0/24\" , \"10.0.3.0/24\" ] public_sub nets = [ \"10.0.101.0/24\" , \"10.0.102.0/24\" , \"10.0.103.0/24\" ] assig n _ge nerate d_ipv 6 _cidr_block = true e na ble_ nat _ga te way = true si n gle_ nat _ga te way = true e na ble_d ns _hos tna mes = true e na ble_d ns _suppor t = true e na ble_s 3 _e n dpoi nt = true public_sub net _ ta gs = { \"kubernetes.io/cluster/${local.prefix}-${local.env}\" = \"shared\" \"kubernetes.io/role/elb\" = \"1\" } priva te _sub net _ ta gs = { \"kubernetes.io/cluster/${local.prefix}-${local.env}\" = \"shared\" \"kubernetes.io/role/internal-elb\" = \"1\" } }","title":"VPC"},{"location":"user-guides/vpc/#vpc-module","text":"The vpc module is the one from upstream . To customize it. Modify the vpc/terragrunt.hcl file. You can use any inputs available in the upstream module. i n clude { pa t h = \"${find_in_parent_folders()}\" } terraf orm { source = \"github.com/terraform-aws-modules/terraform-aws-vpc?ref=v2.48.0\" } locals { aws_regio n = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"aws_region\" ] e n v = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) [ \"Env\" ] pre f ix = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _values.yaml \")}\" )) [ \"prefix\" ] cus t om_ ta gs = yamldecode( f ile( \"${find_in_parent_folders(\" commo n _ ta gs.yaml \")}\" )) } ge nerate \"provider\" { pa t h = \"provider.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF provider \"aws\" { regio n = \"${local.aws_region}\" } EOF } ge nerate \"backend\" { pa t h = \"backend.tf\" i f _exis ts = \"overwrite\" co ntents = << -E OF terraf orm { backe n d \"s3\" {} } EOF } i n pu ts = { ta gs = merge( { \"kubernetes.io/cluster/${local.prefix}-${local.env}\" = \"shared\" }, local.cus t om_ ta gs ) na me = \"vpc-eks-${local.env}\" cidr = \"10.0.0.0/16\" azs = [ \"${local.aws_region}a\" , \"${local.aws_region}b\" , \"${local.aws_region}c\" ] priva te _sub nets = [ \"10.0.1.0/24\" , \"10.0.2.0/24\" , \"10.0.3.0/24\" ] public_sub nets = [ \"10.0.101.0/24\" , \"10.0.102.0/24\" , \"10.0.103.0/24\" ] assig n _ge nerate d_ipv 6 _cidr_block = true e na ble_ nat _ga te way = true si n gle_ nat _ga te way = true e na ble_d ns _hos tna mes = true e na ble_d ns _suppor t = true e na ble_s 3 _e n dpoi nt = true public_sub net _ ta gs = { \"kubernetes.io/cluster/${local.prefix}-${local.env}\" = \"shared\" \"kubernetes.io/role/elb\" = \"1\" } priva te _sub net _ ta gs = { \"kubernetes.io/cluster/${local.prefix}-${local.env}\" = \"shared\" \"kubernetes.io/role/internal-elb\" = \"1\" } }","title":"VPC module"}]}